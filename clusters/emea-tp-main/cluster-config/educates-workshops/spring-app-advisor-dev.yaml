#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
---
apiVersion: training.educates.dev/v1beta1
kind: Workshop
metadata:
  name: "spring-application-advisor-dev"
spec:
  title: "Spring Application Advisor Introduction (Prerelease)"
  description: "A workshop that demonstrates how Spring Application Advisor can help you to  continuously and incrementally upgrade Spring application dependencies, source code and configuration"
  publish:
    image: "$(image_repository)/spring-application-advisor-files:$(workshop_version)"
  workshop:
    image: "ghcr.io/timosalm/spring-application-advisor-workshop/workshop-image:main"
    files:
    - git:
        url: https://github.com/timosalm/spring-application-advisor-workshop
        ref: origin/main
      includePaths:
      - /workshop/**
  environment: 
    secrets:
    - name: spring-application-advisor-workshop-image-pull-secret
      namespace: educates
  session:
    namespaces:
      budget: large
      security:
        token:
          enabled: false
        policy: baseline
    resources:
      memory: 4Gi
    ingresses:
    - name: petclinic
      port: 8080
    - name: app-advisor-server
      protocol: http
      host: app-advisor.$(session_namespace)
      port: 8080
      authentication:
        type: none
    - name: github
      protocol: http
      host: gitea.$(session_namespace)
      port: 80
      authentication:
        type: none
    applications:
      terminal:
        enabled: true
        layout: split
      editor:
        enabled: true
      git:
        enabled: true
    patches:
      imagePullSecrets:
      - name: spring-application-advisor-workshop-image-pull-secret
    objects:
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: app-advisor
      spec:
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/name: app-advisor
        template:
          metadata:
            labels:
              app.kubernetes.io/name: app-advisor
          spec:
            imagePullSecrets:
            - name: spring-application-advisor-workshop-image-pull-secret
            containers:
            - name: workload
              image: ghcr.io/timosalm/spring-application-advisor-workshop/app-advisor-server-image:main
              ports:
              - containerPort: 8080
    - apiVersion: v1
      kind: Service
      metadata:
        name: app-advisor
      spec:
        selector:
          app.kubernetes.io/name: app-advisor
        ports:
          - protocol: TCP
            port: 8080
            targetPort: 8080
    - apiVersion: v1
      kind: Secret
      metadata:
        name: spring-application-advisor-workshop-image-pull-secret
      type: kubernetes.io/dockerconfigjson
      data:
        #@ registry_creds = {"username": data.values.sensitive.workshops.spring_app_advisor.workshop_image.username, "password": data.values.sensitive.workshops.spring_app_advisor.workshop_image.password}
        #@ encoded_creds = base64.encode(json.encode({"auths": {"ghcr.io": registry_creds}}))
        .dockerconfigjson: #@ encoded_creds
    - apiVersion: kappctrl.k14s.io/v1alpha1
      kind: App
      metadata:
        name: $(session_name)-gitea
        namespace: $(workshop_namespace)
      spec:
        deploy:
        - kapp: {}
        fetch:
        - helmChart:
            name: gitea
            repository:
              url: oci://registry-1.docker.io/bitnamicharts
            version: 2.3.18
        serviceAccountName: $(service_account)
        syncPeriod: 720h
        noopDelete: true
        template:
        - helmTemplate:
            namespace: $(session_namespace)
            valuesFrom:
            - secretRef:
                name: $(session_name)-gitea-values
        - ytt:
            inline:
              paths:
                overlays.yaml: |
                  #@ load("@ytt:data", "data")
                  #@ load("@ytt:overlay", "overlay")
                  #@overlay/match by=overlay.all, expects="1+"
                  ---
                  metadata:
                    #@overlay/match missing_ok=True
                    ownerReferences:
                      - apiVersion: training.educates.dev/v1beta1
                        kind: WorkshopSession
                        blockOwnerDeletion: true
                        controller: true
                        name: $(session_name)
                        uid: $(workshop_session_uid)
    - apiVersion: v1
      kind: Secret
      metadata:
        name: $(session_name)-gitea-values
        namespace: $(workshop_namespace)
      stringData:
        #! "github" prefix as Spring Application Advisor is using the url to choose API client implementation
        values.yaml: |
          rootURL: github-$(session_namespace).$(ingress_domain)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: $(session_namespace)-session
        namespace: $(session_namespace)
      rules:
      - apiGroups:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: $(session_namespace)-session-rb
        namespace: $(session_namespace)
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-session
      subjects:
      - kind: ServiceAccount
        name: $(service_account)
        namespace: $(workshop_namespace)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: $(session_name)-vcluster-deployer
      rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - '*'
      - apiGroups:
        - rbac.authorization.k8s.io
        resources:
        - clusterroles
        - clusterrolebindings
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: $(session_name)-vcluster-deployer-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: $(session_name)-vcluster-deployer
      subjects:
      - kind: ServiceAccount
        name: $(service_account)
        namespace: $(workshop_namespace)